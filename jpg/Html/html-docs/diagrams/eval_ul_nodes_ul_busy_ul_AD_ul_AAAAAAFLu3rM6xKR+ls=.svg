<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="559" height="989"><defs></defs><g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 479 108.5 C 479 103.2532944 483.2532944 99 488.5 99 C 493.7467056 99 498 103.2532944 498 108.5 C 498 113.7467056 493.7467056 118 488.5 118 C 483.2532944 118 479 113.7467056 479 108.5 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#000000" stroke="none" d="M 472 101.5 C 472 96.2532944 476.2532944 92 481.5 92 C 486.7467056 92 491 96.2532944 491 101.5 C 491 106.7467056 486.7467056 111 481.5 111 C 476.2532944 111 472 106.7467056 472 101.5 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 229 135 L 741 135 Q 751 135 751 145 L 751 273 Q 751 283 741 283 L 229 283 Q 219 283 219 273 L 219 145 Q 219 135 229 135 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 222 128 L 734 128 Q 744 128 744 138 L 744 266 Q 744 276 734 276 L 222 276 Q 212 276 212 266 L 212 138 Q 212 128 222 128 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 222 128 L 734 128 Q 744 128 744 138 L 744 266 Q 744 276 734 276 L 222 276 Q 212 276 212 266 L 212 138 Q 212 128 222 128 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="374.5" y="147.5">Initialization from job_ptr arguments</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 232 164 L 721 164 L 731 174 L 731 266 L 232 266 L 232 164"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 232 164 L 721 164 L 731 174 L 731 266 L 232 266 L 232 164 L 232 164" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 721 164 L 721 174 L 731 174 L 721 164" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="182">1) job_details * details_ptr = job_ptr -&gt; details;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="197">bitstr_t * req_map = details_ptr -&gt; req_node_map;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="212">2)rem_cpus = details_ptr -&gt; min_cpus;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="227">rem_nodes = MIN(min_nodes,req_nodes);</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="242">min_rem_nodes = min_nodes;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="257">3) i_start, i_end index of node_map </text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 229 315 L 741 315 Q 751 315 751 325 L 751 465 Q 751 475 741 475 L 229 475 Q 219 475 219 465 L 219 325 Q 219 315 229 315 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 222 308 L 734 308 Q 744 308 744 318 L 744 458 Q 744 468 734 468 L 222 468 Q 212 468 212 458 L 212 318 Q 212 308 222 308 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 222 308 L 734 308 Q 744 308 744 318 L 744 458 Q 744 468 734 468 L 222 468 Q 212 468 212 458 L 212 318 Q 212 308 222 308 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="347.5" y="327.5">req_node_map based node_map calculations</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 224 336 L 717 336 L 727 346 L 727 460 L 224 460 L 224 336"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 224 336 L 717 336 L 727 346 L 727 460 L 224 460 L 224 336 L 224 336" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 717 336 L 717 346 L 727 346 L 717 336" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="354">1)Clear nodes in node_map other than req_node_map, If req_node_map is available.</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="369">2)Calculate total_cpus for all the avail_cpus in req_map nodes,As well calculate</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="382">rem_cpus,rem_nodes,min_rem_nodes,max_nodes</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="397">3)if( total_cpus &gt; details_ptr -&gt; max_cpus ) </text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="412">         return error_code;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="427">else</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="442">4)start by using nodes that already having running jobs</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 229 507 L 744 507 Q 754 507 754 517 L 754 636 Q 754 646 744 646 L 229 646 Q 219 646 219 636 L 219 517 Q 219 507 229 507 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 222 500 L 737 500 Q 747 500 747 510 L 747 629 Q 747 639 737 639 L 222 639 Q 212 639 212 629 L 212 510 Q 212 500 222 500 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 222 500 L 737 500 Q 747 500 747 510 L 747 629 Q 747 639 737 639 L 222 639 Q 212 639 212 629 L 212 510 Q 212 500 222 500 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="416.5" y="519.5">Using Non idle_nodes</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 225 683 L 740 683 Q 750 683 750 693 L 750 816 Q 750 826 740 826 L 225 826 Q 215 826 215 816 L 215 693 Q 215 683 225 683 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 218 676 L 733 676 Q 743 676 743 686 L 743 809 Q 743 819 733 819 L 218 819 Q 208 819 208 809 L 208 686 Q 208 676 218 676 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 218 676 L 733 676 Q 743 676 743 686 L 743 809 Q 743 819 733 819 L 218 819 Q 208 819 208 809 L 208 686 Q 208 676 218 676 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="425.5" y="695.5">Using Idle_nodes</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 224 528 L 717 528 L 727 538 L 727 630 L 224 630 L 224 528"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 224 528 L 717 528 L 727 538 L 727 630 L 224 630 L 224 528 L 224 528" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 717 528 L 717 538 L 727 538 L 717 528" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="546">1)select non_idle_node not in node_map</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="561">2)avail_cpus = cpu_cnt[i];</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="576">if( avail_cpus &gt; 0 &amp; max_nodes &gt; 0 )</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="591">  bitset( node_map,i ) ;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="606">  Calculate total_cpus ,rem_cpus, rem_nodes, max_nodes</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="229" y="621">if((max_nodes &lt;=0) || (rem_cpus&lt;=0) &amp;&amp; (rem_nodes&lt;=0)) break;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 220 704 L 713 704 L 723 714 L 723 806 L 220 806 L 220 704"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 220 704 L 713 704 L 723 714 L 723 806 L 220 806 L 220 704 L 220 704" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 713 704 L 713 714 L 723 714 L 713 704" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="722">1)select idle_node not in node_map</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="737">2)avail_cpus = cpu_cnt[i];</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="752">if( avail_cpus &gt; 0 &amp; max_nodes &gt; 0 )</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="767">  bitset( node_map,i ) ;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="782">  Calculate total_cpus ,rem_cpus, rem_nodes, max_nodes</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="225" y="797">if((max_nodes &lt;=0) || (rem_cpus&lt;=0) &amp;&amp; (rem_nodes&lt;=0)) break;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 233 859 L 740 859 Q 750 859 750 869 L 750 1008 Q 750 1018 740 1018 L 233 1018 Q 223 1018 223 1008 L 223 869 Q 223 859 233 859 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 226 852 L 733 852 Q 743 852 743 862 L 743 1001 Q 743 1011 733 1011 L 226 1011 Q 216 1011 216 1001 L 216 862 Q 216 852 226 852 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 226 852 L 733 852 Q 743 852 743 862 L 743 1001 Q 743 1011 733 1011 L 226 1011 Q 216 1011 216 1001 L 216 862 Q 216 852 226 852 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="423.5" y="871.5">Assigns error_code</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 232 884 L 708 884 L 718 894 L 718 997 L 232 997 L 232 884"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 232 884 L 708 884 L 718 894 L 718 997 L 232 997 L 232 884 L 232 884" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 708 884 L 708 894 L 718 894 L 708 884" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="902">1)if((rem_cpus&gt;0) &amp;&amp; (min_rem_nodes&gt;0)) {</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="917">     bit_nclear(node_map,0,cr_node_cnt-1);</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="932">     error_code = SLURM_ERROR;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="947">}</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="962">else</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="977">     error_code = SLURM_SUCCESS;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="237" y="992">return error_code;</text></g></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 471 1055.5 C 471 1048.59644 476.59644 1043 483.5 1043 C 490.40356 1043 496 1048.59644 496 1055.5 C 496 1062.40356 490.40356 1068 483.5 1068 C 476.59644 1068 471 1062.40356 471 1055.5 Z" opacity="0.2"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 464 1048.5 C 464 1041.59644 469.59644 1036 476.5 1036 C 483.40356 1036 489 1041.59644 489 1048.5 C 489 1055.40356 483.40356 1061 476.5 1061 C 469.59644 1061 464 1055.40356 464 1048.5 Z" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="#000000" stroke="none" d="M 469 1048.5 C 469 1044.357864 472.357864 1041 476.5 1041 C 480.642136 1041 484 1044.357864 484 1048.5 C 484 1052.642136 480.642136 1056 476.5 1056 C 472.357864 1056 469 1052.642136 469 1048.5 Z"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 480.6732673267327 112 L 480.2277227722772 127" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 476.32178930283595 116.71682521142918 L 480.2277227722772 127 L 484.73711335429675 116.96678533176961" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 478 277 L 478 307" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 473.790482243984 296.83732514237585 L 478 307 L 482.209517756016 296.83732514237585" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 478.4475138121547 469 L 478.61325966850825 499" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 474.3476596388898 488.8607368913062 L 478.61325966850825 499 L 482.7665666621275 488.8142235928353" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 477.40449438202245 640 L 476.61797752808985 675" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 472.63783931965236 664.7453181501455 L 476.61797752808985 675 L 481.05474988578675 664.9344622078114" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 476.5869565217391 820 L 477.2608695652174 851" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 472.83147061564034 840.9312153193404 L 477.2608695652174 851 L 481.24851745739255 840.7482360401718" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 476.9230769230769 1012 L 476.3333333333333 1035" stroke-miterlimit="10"></path></g><g transform="translate(-198,-82) scale(1,1)"><path fill="none" stroke="#000000" d="M 472.3856944823479 1024.732763395042 L 476.3333333333333 1035 L 480.80196375953864 1024.94856517138" stroke-miterlimit="10"></path></g></g></svg>