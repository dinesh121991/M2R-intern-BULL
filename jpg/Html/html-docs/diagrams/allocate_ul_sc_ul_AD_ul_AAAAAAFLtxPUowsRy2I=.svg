<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="711" height="1025"><defs></defs><g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 277 83 L 640 83 Q 650 83 650 93 L 650 205 Q 650 215 640 215 L 277 215 Q 267 215 267 205 L 267 93 Q 267 83 277 83 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 270 76 L 633 76 Q 643 76 643 86 L 643 198 Q 643 208 633 208 L 270 208 Q 260 208 260 198 L 260 86 Q 260 76 270 76 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 270 76 L 633 76 Q 643 76 643 86 L 643 198 Q 643 208 633 208 L 270 208 Q 260 208 260 198 L 260 86 Q 260 76 270 76 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="304" y="95.5">Initialize Job_details [node level multi_core details]</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 277 247 L 645 247 Q 655 247 655 257 L 655 373 Q 655 383 645 383 L 277 383 Q 267 383 267 373 L 267 257 Q 267 247 277 247 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 270 240 L 638 240 Q 648 240 648 250 L 648 366 Q 648 376 638 376 L 270 376 Q 260 376 260 366 L 260 250 Q 260 240 270 240 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 270 240 L 638 240 Q 648 240 648 250 L 648 366 Q 648 376 638 376 L 270 376 Q 260 376 260 366 L 260 250 Q 260 240 270 240 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="275" y="259.5">Every Sockets within a node calculate free_cores used_cores</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 273 415 L 649 415 Q 659 415 659 425 L 659 540 Q 659 550 649 550 L 273 550 Q 263 550 263 540 L 263 425 Q 263 415 273 415 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 266 408 L 642 408 Q 652 408 652 418 L 652 533 Q 652 543 642 543 L 266 543 Q 256 543 256 533 L 256 418 Q 256 408 266 408 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 266 408 L 642 408 Q 652 408 652 418 L 652 533 Q 652 543 642 543 L 266 543 Q 256 543 256 533 L 256 418 Q 256 408 266 408 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="325" y="427.5">Check min_cores and min_sockets per node</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 273 591 L 653 591 Q 663 591 663 601 L 663 765 Q 663 775 653 775 L 273 775 Q 263 775 263 765 L 263 601 Q 263 591 273 591 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 266 584 L 646 584 Q 656 584 656 594 L 656 758 Q 656 768 646 768 L 266 768 Q 256 768 256 758 L 256 594 Q 256 584 266 584 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 266 584 L 646 584 Q 656 584 656 594 L 656 758 Q 656 768 646 768 L 266 768 Q 256 768 256 758 L 256 594 Q 256 584 266 584 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="362" y="603.5">Calculate avail_cpus num_tasks</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 272 104 L 620 104 L 630 114 L 630 202 L 272 202 L 272 104"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 272 104 L 620 104 L 630 114 L 630 202 L 272 202 L 272 104 L 272 104" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 620 104 L 620 114 L 630 114 L 620 104" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="277" y="122">multi_core_data_t *mc_ptr = job_ptr-&gt; details -&gt; mc_ptr;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="277" y="137">min_cores = mc_ptr -&gt; cores_per_socket; min_sockets;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="277" y="152">ntasks_per_core = mc_ptr -&gt; threads_per_core;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="277" y="167">ntasks_per_socket = mc_ptr-&gt; ntasks_per_socket;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="277" y="182">threads_per_socket=threads_per_core *cores_per_socket;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 276 264 L 624 264 L 634 274 L 634 369 L 276 369 L 276 264"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 276 264 L 624 264 L 634 274 L 634 369 L 276 369 L 276 264 L 276 264" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 624 264 L 624 274 L 634 274 L 624 264" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="282">1) for every socket level in a node calculate</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="295">free_cores,used_cores,used_cpu_array</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="310">2) If entire_sockets_only, then remove free_cores for</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="323">used_cores in the socket level</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="338">3)If the partition has a maximum cpu limit(job_ptr -&gt;</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="351">part_ptr-&gt;max_cpus_per_node),then remove free_cores[i] to</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="281" y="364">obey the constraint.</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 268 444 L 628 444 L 638 454 L 638 527 L 268 527 L 268 444"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 268 444 L 628 444 L 638 454 L 638 527 L 268 527 L 268 444 L 268 444" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 628 444 L 628 454 L 638 454 L 628 444" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="273" y="462">if ( free_cores[i] &lt; min_core ) free_cores[i]=0</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="273" y="477">if ( num_sockets_selected &lt; min_sockets ) </text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="273" y="492">  num_tasks=0; goto fini;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="273" y="507">if ( free_core_count &lt; 1 )</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="273" y="522">  num_tasks=0; goto fini;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="649" y="106">step 1</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="653" y="294">step 1</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="661" y="478">step 2</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 264 608 L 640 608 L 650 618 L 650 758 L 264 758 L 264 608"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 264 608 L 640 608 L 650 618 L 650 758 L 264 758 L 264 608 L 264 608" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 640 608 L 640 618 L 650 618 L 640 608" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="626">1)threads_per_core,ntasks_per_core,ntasks_per_socket,ntasks</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="639">_per_node,cpus_per_task to determine the num_tasks to run      </text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="652">   on this node</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="667">2)avail_cpus = free_cores[i]*threads_per_core;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="682">num_tasks = avail_cpus/cpus_per_task;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="697">3)if(num_tesks &lt; job_ptr -&gt;details-&gt;ntasks_per_node</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="710">&amp;&amp;job_ptr-&gt;details-&gt;overcommit==0 || avail_cpus &lt; job_ptr -&gt;</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="723">details -&gt; pn_min_cpus) {</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="738">num_tasks =0 ; goto fin;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="269" y="753">}</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 443 52.5 C 443 47.2532944 447.2532944 43 452.5 43 C 457.7467056 43 462 47.2532944 462 52.5 C 462 57.7467056 457.7467056 62 452.5 62 C 447.2532944 62 443 57.7467056 443 52.5 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#000000" stroke="none" d="M 436 45.5 C 436 40.2532944 440.2532944 36 445.5 36 C 450.7467056 36 455 40.2532944 455 45.5 C 455 50.7467056 450.7467056 55 445.5 55 C 440.2532944 55 436 50.7467056 436 45.5 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 269 815 L 652 815 Q 662 815 662 825 L 662 992 Q 662 1002 652 1002 L 269 1002 Q 259 1002 259 992 L 259 825 Q 259 815 269 815 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 262 808 L 645 808 Q 655 808 655 818 L 655 985 Q 655 995 645 995 L 262 995 Q 252 995 252 985 L 252 818 Q 252 808 262 808 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 262 808 L 645 808 Q 655 808 655 818 L 655 985 Q 655 995 645 995 L 262 995 Q 252 995 252 985 L 252 818 Q 252 808 262 808 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="bold" text-decoration="none" x="407" y="827.5">Allocating cores</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#ffffff" stroke="none" d="M 260 840 L 632 840 L 642 850 L 642 982 L 260 982 L 260 840"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 260 840 L 632 840 L 642 850 L 642 982 L 260 982 L 260 840 L 260 840" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 632 840 L 632 850 L 642 850 L 632 840" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="858">1) cps (CPUs of a socket) is calculated based on the values</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="871">ntasks_per_socket,cpus_per_task</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="886">2) For every sockets calculate</text><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="899">cpu_cnt,cpu_count,avail_cpus,bit_clear(core_map,c)</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="914">3) if( !free_cores[i] &lt;= 0 || cpu_cnt &lt; cps )</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="929">   bit_clear(core_map,c)</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="944">4) return cpu_count;</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="265" y="959">All the operation we did within a single node index(node_i)</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="661" y="662">step 3</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="661" y="874">step 4</text></g></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 445.680412371134 56 L 446.8556701030928 75" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 442.0267624636729 65.11659719479407 L 446.8556701030928 75 L 450.42973791029476 64.59682551768344" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 452.21084337349396 209 L 452.7530120481928 239" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 448.3605487410123 228.91504754125867 L 452.7530120481928 239 L 456.7782097290923 228.76292113785962" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 454 377 L 454 407" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 449.790482243984 396.83732514237585 L 454 407 L 458.209517756016 396.83732514237585" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 454.6865671641791 544 L 455.07462686567163 583" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 450.7642013436327 572.8797118707541 L 455.07462686567163 583 L 459.1828201129899 572.7959445198152" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 454.76 769 L 454.25333333333333 807" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 450.17967999517924 796.7821064558028 L 454.25333333333333 807 L 458.59796724826543 796.894350285844" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 447 1035.5 C 447 1028.59644 452.59644 1023 459.5 1023 C 466.40356 1023 472 1028.59644 472 1035.5 C 472 1042.40356 466.40356 1048 459.5 1048 C 452.59644 1048 447 1042.40356 447 1035.5 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 440 1028.5 C 440 1021.59644 445.59644 1016 452.5 1016 C 459.40356 1016 465 1021.59644 465 1028.5 C 465 1035.40356 459.40356 1041 452.5 1041 C 445.59644 1041 440 1035.40356 440 1028.5 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#000000" stroke="none" d="M 445 1028.5 C 445 1024.357864 448.357864 1021 452.5 1021 C 456.642136 1021 460 1024.357864 460 1028.5 C 460 1032.642136 456.642136 1036 452.5 1036 C 448.357864 1036 445 1032.642136 445 1028.5 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 452.251968503937 996 L 452.1023622047244 1015" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 447.97299351928064 1004.8044953896496 L 452.1023622047244 1015 L 456.3917680528252 1004.8707849529059" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 151 936.5 C 151 931.2532944 155.2532944 927 160.5 927 C 165.7467056 927 170 931.2532944 170 936.5 C 170 941.7467056 165.7467056 946 160.5 946 C 155.2532944 946 151 941.7467056 151 936.5 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#000000" stroke="none" d="M 144 929.5 C 144 924.2532944 148.2532944 920 153.5 920 C 158.7467056 920 163 924.2532944 163 929.5 C 163 934.7467056 158.7467056 939 153.5 939 C 148.2532944 939 144 934.7467056 144 929.5 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#C0C0C0" stroke="none" d="M 151 999.5 C 151 992.59644 156.59644 987 163.5 987 C 170.40356 987 176 992.59644 176 999.5 C 176 1006.40356 170.40356 1012 163.5 1012 C 156.59644 1012 151 1006.40356 151 999.5 Z" opacity="0.2"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="none" stroke="#000000" d="M 144 992.5 C 144 985.59644 149.59644 980 156.5 980 C 163.40356 980 169 985.59644 169 992.5 C 169 999.40356 163.40356 1005 156.5 1005 C 149.59644 1005 144 999.40356 144 992.5 Z" stroke-miterlimit="10"></path></g><g transform="translate(-78,-26) scale(1,1)"><path fill="#000000" stroke="none" d="M 149 992.5 C 149 988.357864 152.357864 985 156.5 985 C 160.642136 985 164 988.357864 164 992.5 C 164 996.642136 160.642136 1000 156.5 1000 C 152.357864 1000 149 996.642136 149 992.5 Z"></path></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="93" y="934">start</text></g></g><g transform="translate(-78,-26) scale(1,1)"><g><path fill="none" stroke="none"></path><text fill="#000000" stroke="none" font-family="Arial" font-size="13px" font-style="normal" font-weight="normal" text-decoration="none" x="93" y="994">stop</text></g></g></g></svg>